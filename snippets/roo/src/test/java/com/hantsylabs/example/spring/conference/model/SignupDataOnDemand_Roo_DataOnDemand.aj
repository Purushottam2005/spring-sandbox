// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hantsylabs.example.spring.conference.model;

import com.hantsylabs.example.spring.conference.model.Conference;
import com.hantsylabs.example.spring.conference.model.ConferenceDataOnDemand;
import com.hantsylabs.example.spring.conference.model.Signup;
import com.hantsylabs.example.spring.conference.model.SignupDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SignupDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SignupDataOnDemand: @Component;
    
    private Random SignupDataOnDemand.rnd = new SecureRandom();
    
    private List<Signup> SignupDataOnDemand.data;
    
    @Autowired
    ConferenceDataOnDemand SignupDataOnDemand.conferenceDataOnDemand;
    
    public Signup SignupDataOnDemand.getNewTransientSignup(int index) {
        Signup obj = new Signup();
        setComment(obj, index);
        setCompany(obj, index);
        setConference(obj, index);
        setCreatedAt(obj, index);
        setEmail(obj, index);
        setFirstName(obj, index);
        setLastName(obj, index);
        setOccupation(obj, index);
        setPhone(obj, index);
        return obj;
    }
    
    public void SignupDataOnDemand.setComment(Signup obj, int index) {
        String comment = "comment_" + index;
        obj.setComment(comment);
    }
    
    public void SignupDataOnDemand.setCompany(Signup obj, int index) {
        String company = "company_" + index;
        obj.setCompany(company);
    }
    
    public void SignupDataOnDemand.setConference(Signup obj, int index) {
        Conference conference = conferenceDataOnDemand.getRandomConference();
        obj.setConference(conference);
    }
    
    public void SignupDataOnDemand.setCreatedAt(Signup obj, int index) {
        Date createdAt = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedAt(createdAt);
    }
    
    public void SignupDataOnDemand.setEmail(Signup obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void SignupDataOnDemand.setFirstName(Signup obj, int index) {
        String firstName = "firstName_" + index;
        obj.setFirstName(firstName);
    }
    
    public void SignupDataOnDemand.setLastName(Signup obj, int index) {
        String lastName = "lastName_" + index;
        obj.setLastName(lastName);
    }
    
    public void SignupDataOnDemand.setOccupation(Signup obj, int index) {
        String occupation = "occupation_" + index;
        obj.setOccupation(occupation);
    }
    
    public void SignupDataOnDemand.setPhone(Signup obj, int index) {
        String phone = "phone_" + index;
        obj.setPhone(phone);
    }
    
    public Signup SignupDataOnDemand.getSpecificSignup(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Signup obj = data.get(index);
        Long id = obj.getId();
        return Signup.findSignup(id);
    }
    
    public Signup SignupDataOnDemand.getRandomSignup() {
        init();
        Signup obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Signup.findSignup(id);
    }
    
    public boolean SignupDataOnDemand.modifySignup(Signup obj) {
        return false;
    }
    
    public void SignupDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Signup.findSignupEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Signup' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Signup>();
        for (int i = 0; i < 10; i++) {
            Signup obj = getNewTransientSignup(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
